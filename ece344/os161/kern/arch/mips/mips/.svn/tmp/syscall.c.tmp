#include <types.h>
#include <kern/errno.h>
#include <kern/unistd.h>
#include <vnode.h>
#include <vfs.h>
#include <uio.h>
#include <lib.h>
#include <machine/spl.h>
#include <machine/trapframe.h>
#include <thread.h>
#include <curthread.h>
#include <addrspace.h>
#include <machine/pcb.h>
#include <machine/spl.h>
#include <kern/callno.h>
#include <syscall.h>
#include <threadpid.h>
#include <synch.h>

int count = 0;
int mall = 0;

/*
 * System call handler.
 *
 * A pointer to the trapframe created during exception entry (in
 * exception.S) is passed in.
 *
 * The calling conventions for syscalls are as follows: Like ordinary
 * function calls, the first 4 32-bit arguments are passed in the 4
 * argument registers a0-a3. In addition, the system call number is
 * passed in the v0 register.
 *
 * On successful return, the return value is passed back in the v0
 * register, like an ordinary function call, and the a3 register is
 * also set to 0 to indicate success.
 *
 * On an error return, the error code is passed back in the v0
 * register, and the a3 register is set to 1 to indicate failure.
 * (Userlevel code takes care of storing the error code in errno and
 * returning the value -1 from the actual userlevel syscall function.
 * See src/lib/libc/syscalls.S and related files.)
 *
 * Upon syscall return the program counter stored in the trapframe
 * must be incremented by one instruction; otherwise the exception
 * return code will restart the "syscall" instruction and the system
 * call will repeat forever.
 *
 * Since none of the OS/161 system calls have more than 4 arguments,
 * there should be no need to fetch additional arguments from the
 * user-level stack.
 *
 * Watch out: if you make system calls that have 64-bit quantities as
 * arguments, they will get passed in pairs of registers, and not
 * necessarily in the way you expect. We recommend you don't do it.
 * (In fact, we recommend you don't use 64-bit quantities at all. See
 * arch/mips/include/types.h.)
 */

int sys_write(int ignore, const void* buf, size_t size)
{
	//kprintf("SIZE IS %d\n", size);
	char * buffer = kmalloc((size+1)*sizeof(char));
	int i;
	copyin(buffer, buf, size);
	//kprintf("BUFFER IS %s\n", buf);
	//for(i=0; i<size; i++)
	//{
		buffer = buf;
	//} 
	buffer[size] = '\0';
	kprintf("%s", buffer);
	//kfree(buffer);
	count += 4;
	return count;
}

int sys_read(int fd, void *buf, size_t length, int* retval)
{
  struct uio iobuf;
  if(sizeof(buf) != 0)
	kprintf("%d!\n", sizeof(buf));
  if (!buf || buf == NULL) {
    kprintf("is buf valid?\n");
    *retval = -1;	//error happens here
    return EFAULT;
  }

   *retval = -1;

  struct vnode *temp;
  char* terminal = kstrdup("con:");
  int error = vfs_open(terminal, O_RDONLY, &temp);	//read-only mode
  kfree(terminal);
/*
 *--------------------------------------------------
 *|	PENDING ERROR CHECKING HERE(file status)   |
 *|	need to free terminal as well	   	   |
 *--------------------------------------------------
 */
  if (error != 0 ) {	
    *retval = -1;	//error happens here
    return EBADF;	
  }

//	Initialize uio stuff

  iobuf.uio_iovec.iov_un.un_ubase = buf;
  iobuf.uio_iovec.iov_len = length;
//  kprintf("iovlen is %d\n", iobuf.uio_iovec.iov_len);
//  iobuf.uio_iov = &iov;
//  iobuf.uio_iovcnt = 1;
  iobuf.uio_offset = 0; // initialize to 0 offset
//  kprintf("offset is %d\n", iobuf.uio_offset);
  iobuf.uio_resid = length;
//  kprintf("resid is %d\n", iobuf.uio_resid);
  iobuf.uio_segflg = UIO_USERSPACE;
  iobuf.uio_rw = UIO_READ;
  iobuf.uio_space = curthread->t_vmspace;	

  // Read buffer here
  error = VOP_READ(temp, &iobuf);
  vfs_close(temp);

 /*
 *--------------------------------------------------
 *|	PENDING ERROR CHECKING HERE(file status)   |   	  
 *--------------------------------------------------
 */
  // Error during reading buffer
  if (error != 0)
  {
	*retval = -1;	//error happens here
	return error;
  }
  *retval = length - iobuf.uio_resid;
  return 0;
}

int sys_fork(struct trapframe* parent_tf, int *retval)
{
	
	struct thread* child_thread = (struct thread*) kmalloc(sizeof(struct thread));
// Copy parent's trapframe to an new allocated trapframe
	struct trapframe* child_tf = (struct trapframe*) kmalloc(sizeof(struct trapframe));
  	if(child_tf==NULL)
    		return ENOMEM;	//out of memory error
	*child_tf = *parent_tf; 

// Copy current adddress space from t_vmspace to child_as
	struct addrspace *child_as ;
  	int error = as_copy(curthread->t_vmspace, &child_as);
  	if(error!=0)
    		return error;
	as_activate(curthread->t_vmspace);

// call thread fork to create child fork
	int kl=splhigh();
  	thread_fork( curthread->t_name, child_tf, (unsigned long) child_as, (void (*) (void *, unsigned long)) md_forkentry, &child_thread);
	splx(kl);

//	set return value child thread pid
	if(curthread != NULL)
	{
		*retval = (get_td(child_thread)) -> pidnum ;
	}
	return 0;
}

int sys_execv(struct trapframe* tf)
{
<<<<<<< .mine
=======
/* 
	tf_a0: file path
	tf_a1: pointer vector 
*/
// 1.Counting the total number of strings in args
	int args_counter;
	args_counter = 0;
	kprintf("args_counter is %d.\n", args_counter);
	while((args[args_counter]) != NULL)
		args_counter ++;
	kprintf("args_counter is %d.\n", args_counter);
>>>>>>> .r53

	//-------------------------------------------------
	//|	   PENDING "ERROR CHECKING" HERE	  |
	//-------------------------------------------------

	char* program = kstrdup( (char *) tf->tf_a0);

	char** args = (char **) tf->tf_a1;
// Initialize arguments
	struct vnode *v;
	vaddr_t entrypoint, new_stackptr;
	int result;
	int counter = 0;
	int i = 0;
	int j = 0;
	int align_offset = 0;
	int offset = 0;
	int record[counter]; // record how much memory each buffer occupies

	if(args[sizeof(args)] != NULL || program == NULL)
		return -1;

	//--------------------------------------------	
	// PENDING exact errno here, invalid argument!
	//--------------------------------------------

// Copy arguments into kernel buffer

	while(args[counter] != NULL)
	{
		counter ++;	
	}

	char** buffer = kmalloc((counter+1)*sizeof(char*));
	while(args[i] != NULL)
	{
		offset = 4 * (sizeof(args[i]) % 4 + 1);
		//temp = malloc(offset*sizeof(char));
		copyin(buffer[j], args[i], offset);
		j = j + offset;// actual location of next buffer due to 4 bytes alignment
		record[i] = j; 
		i ++ ;
	}

// Open the new executable, create a new address space and load elf into it.
	/* Open the file. */
	result = vfs_open(program, O_RDONLY, &v);
	if (result) {
		return result;
	}

 	/* We should NOT be a new thread. */
  	assert(curthread->t_vmspace != NULL);
  	as_destroy(curthread->t_vmspace);

	/* Create new address space. */
	curthread->t_vmspace = as_create();
	if (curthread->t_vmspace==NULL) {
		kprintf("ENOMEM here!\n");
		vfs_close(v);
		return ENOMEM;
	}	

	/* Activate the new address space. */
	as_activate(curthread->t_vmspace);

	/* Load the executable. */
	result = load_elf(v, &entrypoint);
	if (result) {
	/* thread_exit destroys curthread->t_vmspace */
		vfs_close(v);
		return result;
	}

	/* Done with the file now. */
	vfs_close(v);

	result = as_define_stack(curthread->t_vmspace, &new_stackptr);
	vaddr_t argv_ptr[counter+1];
	
	int k = 0;
	while(k != counter)
	{
		copyout(buffer[k], (userptr_t) argv_ptr[k], record[k]);
		k++;
	}

// Copy out pointer to stack pointer
	int stack_offset;

	stack_offset += sizeof(vaddr_t) * (counter + 1);

 	new_stackptr = new_stackptr - stack_offset - ((new_stackptr - stack_offset) % 8);

	copyout(argv_ptr, (userptr_t) new_stackptr, sizeof(vaddr_t) * (counter+1));

	md_usermode(counter, (userptr_t) new_stackptr , new_stackptr, entrypoint);

// md_usermode does not return 
 	panic("md_usermode returned\n");
		return EINVAL;
}

pid_t sys_getpid()
{
//	kprintf("getpid value is %d\n", curthread -> pidnum);
	return (get_td(curthread) -> pidnum);
}


struct cv *c;
struct lock *l;
struct cv *c2;
struct lock *l2;
struct cv *c3;
struct lock *l3;
//struct cv *c4;
//struct lock *l4;

int sys_waitpid(pid_t pid, int *status, int options, int* retval)
{
	if(options != 0){
   		return EINVAL;
  	}
	if(mall==0)
	{
		c = kmalloc(sizeof(struct cv));
		l = kmalloc(sizeof(struct lock));
		c2 = kmalloc(sizeof(struct cv));
		l2 = kmalloc(sizeof(struct lock));
		c3 = kmalloc(sizeof(struct cv));
		l3 = kmalloc(sizeof(struct lock));
		mall = 1;
	}

	lock_acquire(l2);
	struct threadpid *temp;
	temp = get_threadpid(get_td(curthread) -> pidnum);
	if((temp -> child) == NULL)
	{
		lock_release(l2);
		return EINVAL;
	}
	temp = temp -> child;
	while(temp -> next != NULL)
	{
		if((temp -> pidnum) == pid)
		{
			if(temp -> waiting == 5)
			{//kprintf("**1**\n");
			
				*status = temp -> ecode;
				*retval = pid;
	
				temp -> waiting = 0;
				lock_release(l2);
				cv_signal(c3,l3);
			}  
			else
			{//kprintf("**2**\n");
				temp -> waited = 1;
				lock_release(l2);
				cv_wait(c, l);
				lock_acquire(l2);
				*status = temp -> ecode;
				*retval = pid;
				temp -> waited = 0;
				//lock_release(l2);
			}
			return 0;
		}
		temp = temp -> next;
	}
	if((temp -> pidnum) == pid)
	{
		if(temp -> waiting == 5)
		{	//kprintf("**3**\n");
			*status = temp -> ecode;
			*retval = pid;

			temp -> waiting = 0;
			lock_release(l2);
			cv_signal(c3,l3);
		}  
		else
		{//kprintf("**4** %d\n", pid);
			temp -> waited = 1;//kprintf("**4.1**\n");
			lock_release(l2);//kprintf("**4.2**\n");
			cv_wait(c, l);//kprintf("**4.3**\n");
			lock_acquire(l2);//kprintf("**4.4**\n");
			*status = temp -> ecode;//kprintf("**4.5** %d\n", temp -> ecode);
			*retval = pid;//kprintf("**4.6**\n");
			temp -> waited = 0;
			//lock_release(l2);
			
		}
		return 0;
	}
	else
	{
		lock_release(l2);
		return EINVAL;
	}	
	
	return 0;
}

void sys__exit(int exitcode)
{
	if(mall==0)
	{
		c = kmalloc(sizeof(struct cv));
		l = kmalloc(sizeof(struct lock));
		c2 = kmalloc(sizeof(struct cv));
		l2 = kmalloc(sizeof(struct lock));
		c3 = kmalloc(sizeof(struct cv));
		l3 = kmalloc(sizeof(struct lock));
		mall = 1;	
	}
	lock_acquire(l2);
	if(get_td(curthread) -> waited == 1)
	{	//kprintf("**5** %d\n", get_td(curthread) -> pidnum);
		get_td(curthread) -> ecode = exitcode;	//kprintf("**5.1** %d\n", get_td(curthread) -> ecode);
		lock_release(l2);//kprintf("**5.2**\n");
		cv_signal(c, l); //kprintf("**5.3**\n");
		while(get_td(curthread) -> waited == 1)
		{
		}
		//lock_acquire(l2);//kprintf("**5.4**\n");
		delete_pid(get_td(curthread) -> pidnum);//kprintf("**5.5**\n");
		lock_release(l2);//kprintf("**5.6**\n");
		thread_exit();
	}
	else
	{	//kprintf("**6**\n");
		get_td(curthread) -> waiting = 5;
		get_td(curthread) -> ecode = exitcode;
		lock_release(l2);
		cv_wait(c3,l3);
		lock_acquire(l2);	
		delete_pid(get_td(curthread) -> pidnum);
		lock_release(l2);
		thread_exit();	
	}
	
}


/*
struct cv *c;
struct lock *l;
struct cv *c2;
struct lock *l2;

pid_t sys_waitpid(pid_t pid, int *status, int options)
{
	if(mall==0)
	{
		c = kmalloc(sizeof(struct cv));
		l = kmalloc(sizeof(struct lock));
		c2 = kmalloc(sizeof(struct cv));
		l2 = kmalloc(sizeof(struct lock));	
		mall = 1;
	}
	
	struct threadpid *temp;
	temp = get_threadpid(curthread -> pidnum);
	if((temp -> child) == NULL)
	{
		return -1;
	}
	temp = temp -> child;
	while(temp -> next != NULL)
	{
		if((temp -> pidnum) == pid)
		{
			if(temp -> waited == 1)
			{
				return EINVAL;
			}
			temp -> waited = 1;
			//lock_release(l2);
			//lock_acquire(l);
			cv_signal(c2, l2); 
			cv_wait(c, l);
			*status = temp -> ecode;
			return 0;
		}
		temp = temp -> next;
	}
	if((temp -> pidnum) == pid)
	{
		if(temp -> waited == 1)
		{
			return EINVAL;
		}
		temp -> waited = 1;
		//lock_release(l2);
		//lock_acquire(l);
		cv_signal(c2, l2); 
		cv_wait(c, l);
		*status = temp -> ecode;
		return 0;
	}
	else
	{
		return EINVAL;
	}
	return 0;
}

void sys__exit(int exitcode)
{
	if(mall==0)
	{
		c = kmalloc(sizeof(struct cv));
		l = kmalloc(sizeof(struct lock));
		c2 = kmalloc(sizeof(struct cv));
		l2 = kmalloc(sizeof(struct lock));
		mall = 1;	
	}

	if(get_threadpid(curthread -> pidnum) -> waited == 1)
	{	
		//lock_release(l);
		
		cv_signal(c, l);
		get_threadpid(curthread -> pidnum) -> ecode = exitcode;
		get_threadpid(curthread -> pidnum) -> waited = 0;
		thread_exit();
	}
	else
	{
		//lock_acquire(l2);
		cv_wait(c2, l2);
		get_threadpid(curthread -> pidnum) -> ecode = exitcode;
		get_threadpid(curthread -> pidnum) -> waited = 0;
		thread_exit();
	} 
}*/

void
mips_syscall(struct trapframe *tf)
{
	int callno;
	int32_t retval;
	int err;

	assert(curspl==0);

	callno = tf->tf_v0;

	/*
	 * Initialize retval to 0. Many of the system calls don't
	 * really return a value, just 0 for success and -1 on
	 * error. Since retval is the value returned on success,
	 * initialize it to 0 by default; thus it's not necessary to
	 * deal with it except for calls that return other values, 
	 * like write.
	 */

	retval = 0;
	

	switch (callno) {
	    case SYS_reboot:
<<<<<<< .mine
=======
//		kprintf("11\n");
>>>>>>> .r53
		err = sys_reboot(tf->tf_a0);
<<<<<<< .mine
=======
//		kprintf("1\n");
>>>>>>> .r53
		break;
	    case SYS_write:
<<<<<<< .mine
		retval = sys_write(tf->tf_a0, tf->tf_a1, tf->tf_a2);
		//kprintf("wr ERR%d.\n", err);
		err = 0;
=======
//		kprintf("12\n");
		err = sys_write(tf->tf_a0, tf->tf_a1, tf->tf_a2);
//		kprintf("--2\n");
>>>>>>> .r53
		break;
	    case SYS_read:
<<<<<<< .mine
=======
//		kprintf("13\n");
>>>>>>> .r53
	  	err = sys_read(tf->tf_a0, tf->tf_a1, tf->tf_a2, &retval);
<<<<<<< .mine
		//kprintf("read ERR%d.\n", err);
=======
//		kprintf("3\n");
>>>>>>> .r53
		break;	
	    case SYS_fork:
<<<<<<< .mine
=======
//		kprintf("14\n");
>>>>>>> .r53
		err = sys_fork(tf, &retval);
<<<<<<< .mine
		//kprintf("RETVAL%d++++ERR%d.\n", retval, err);
=======
//		kprintf("4\n");
>>>>>>> .r53
		break;
	    case SYS_execv:
<<<<<<< .mine
		err = sys_execv(tf);
=======
//		kprintf("15\n");
		err = execv(tf->tf_a0, tf->tf_a1);
//		kprintf("5\n");
>>>>>>> .r53
		break;
	    case SYS_getpid:
<<<<<<< .mine
=======
//		kprintf("16\n");
>>>>>>> .r53
		retval = sys_getpid();
<<<<<<< .mine
		err = 0;
		//kprintf("getpid retval%d.\n", retval);
=======
//		kprintf("6\n");
>>>>>>> .r53
		break;
	    case SYS_waitpid:
		err = sys_waitpid((pid_t) tf->tf_a0, (int *) tf->tf_a1, (int) tf->tf_a2, &retval);
		//kprintf("waitpid ERR%d.\n", err);
		break;
            case SYS__exit:
		sys__exit(tf->tf_a0);
		//kprintf("exit ERR%d.\n", err);
		//err = 0;
		break;

	    /* Add stuff here */
 
	    default:
		kprintf("Unknown syscall %d\n", callno);
		err = ENOSYS;
		break;
	}


	if (err) {
		/*
		 * Return the error code. This gets converted at
		 * userlevel to a return value of -1 and the error
		 * code in errno.
		 */
<<<<<<< .mine
=======
		kprintf("9\n");
>>>>>>> .r53
		tf->tf_v0 = err;
		tf->tf_a3 = 1;      /* signal an error */
	}
	else {
		/* Success. */
		tf->tf_v0 = retval;
		tf->tf_a3 = 0;      /* signal no error */
	}
	
	/*
	 * Now, advance the program counter, to avoid restarting
	 * the syscall over and over again.
	 */
<<<<<<< .mine

//	kprintf("tf_v0 is %d, tf_a3 is %d\n", tf->tf_v0, tf->tf_a3);	

=======
		kprintf("92\n");
>>>>>>> .r53
	tf->tf_epc += 4;
<<<<<<< .mine

=======
		kprintf("93\n");
>>>>>>> .r53
	/* Make sure the syscall code didn't forget to lower spl */
	assert(curspl==0);
}

void
md_forkentry(struct trapframe *child_tf, unsigned long addrspace)
{
	/*
	 * This function is provided as a reminder. You need to write
	 * both it and the code that calls it.
	 *
 * Thus, you can trash it and do things another way if you prefer.
	 */
 	struct addrspace* child_as = (struct addrspace*) addrspace;
	struct trapframe tplocal;
	tplocal = *child_tf;
	child_tf = &tplocal;

	// modify V0 and a3 in tf to indicate success
	child_tf->tf_v0 = 0;	//success
	child_tf->tf_a3 = 0;	//success
	
	// Now, advance the program counter, to avoid restarting
	// the syscall over and over again.

	child_tf->tf_epc += 4;  //pc=pc+4

	// load and activate child address space
	curthread->t_vmspace = child_as;
	as_activate(curthread->t_vmspace);
	// return to usermode
	mips_usermode(&tplocal);
	(void)child_tf;
}
