/*
 * Sample/test code for running a user program.  You can use this for
 * reference when implementing the execv() system call. Remember though
 * that execv() needs to do more than this function does.
 */

#include <types.h>
#include <kern/unistd.h>
#include <kern/errno.h>
#include <lib.h>
#include <addrspace.h>
#include <thread.h>
#include <curthread.h>
#include <vm.h>
#include <vfs.h>
#include <test.h>

/*
 * Load program "progname" and start running it in usermode.
 * Does not return except on error.
 *
 * Calls vfs_open on progname and thus may destroy it.
 */

int
runprogram(char *progname, char** args, int args_counter)
{
/* 
	tf_a0: file path
	tf_a1: pointer vector 
*/
// 1.Counting the total number of strings in args
	// copy out args
	char** temp_args = kmalloc( (args_counter+1) * sizeof( char* ) );
	int i;

	for (i = 0; i < args_counter; i++) {
	  *(temp_args+i) = kstrdup( *(temp_args+i) );
	}
	*(temp_args+i) = NULL;

	kprintf("2args_counter is %d.\n", args_counter);
	kprintf("2args is %s.\n", temp_args[0]);
	kprintf("2args length is %d.\n", strlen(temp_args[0]));
// 2.Counting the size of each string including null terminator
	int char_counter[args_counter];
	int total_char = 0;
	int temp = 0;
	while (temp != args_counter)
	{	
		char_counter[temp] = strlen(temp_args[temp])+1;	//plus the null terminator
		kprintf("Strlength is %d.\n", strlen(temp_args[temp]));
		total_char = total_char + strlen(temp_args[temp]) ;
		temp++;
	}

// 3.Put args on heap using kmalloc + NULL terminated
	char** args_list = (char*) kmalloc((args_counter)*sizeof(char));
	*args_list = *temp_args;	//store the content in args into args_list

/*-----------------------------------Copy from runprogram.c---------------------------------------*/
	struct vnode *v;
	vaddr_t entrypoint, stackptr;
	int result;

	/* Open the file. */
	result = vfs_open(progname, O_RDONLY, &v);
	if (result) {
		return result;
	}

	/* We should be a new thread. */
	assert(curthread->t_vmspace == NULL);

	/* Create a new address space. */
	curthread->t_vmspace = as_create();
	if (curthread->t_vmspace==NULL) {
		vfs_close(v);
		return ENOMEM;
	}

	/* Activate it. */
	as_activate(curthread->t_vmspace);

	/* Load the executable. */
	result = load_elf(v, &entrypoint);
	if (result) {
		/* thread_exit destroys curthread->t_vmspace */
		vfs_close(v);
		return result;
	}

	/* Done with the file now. */
	vfs_close(v);

	/* Define the user stack in the address space */
	result = as_define_stack(curthread->t_vmspace, &stackptr);
	if (result) {
		/* thread_exit destroys curthread->t_vmspace */
		return result;
	}

/*-----------------------------------End copy from runprogram.c---------------------------------------*/

// 4.User stackptr is activated, store args from heap to stack.
// 4.1 Allcoate space on stack before copying
//    copyout(temp[i], (userptr_t) argv_ptr[i], len); // copy into user stack
	vaddr_t temp_stackptr[args_counter+1];
	temp_stackptr[0] = stackptr - total_char;
	temp_stackptr[args_counter+1] = NULL;
	size_t char_counter2;
	char_counter2 = (size_t) total_char;

	temp = 0;
	while(temp != args_counter)
	{
		copyout(*temp_args[temp], temp_stackptr[temp], char_counter[temp]);
		temp_stackptr[temp] = temp_stackptr[temp] + char_counter[temp];
		temp ++;
	}

	char_counter2 = char_counter2 + sizeof(vaddr_t) * (args_counter + 1);
 	stackptr = stackptr - char_counter2 - ((stackptr - char_counter2) % 8);
  	copyout(temp_stackptr, (userptr_t) stackptr, sizeof(vaddr_t) * (args_counter+1));

	/* Warp to user mode. */
	md_usermode(args_counter /*argc*/, (userptr_t) stackptr /*userspace addr of argv*/,
		    stackptr, entrypoint);
	
	/* md_usermode does not return */
	panic("md_usermode returned\n");
	return EINVAL;
}

